<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    配置bean
    class="全类名" ，通过反射的方式在IoC容器中创建Bean，所以要求Bean中必须有无参数的构造
    id：标识容器中的bean id唯一
    使用setter方法注入
    -->
    <bean id="helloWorld" class="com.olivia.springlearning.beans.basic.HelloWorld">
        <property name="name2" value="Spring"></property>
    </bean>
    <!--通过构造方法来配置bean的属性-->
    <bean id="car" class="com.olivia.springlearning.beans.basic.Car">
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg value="Shanghai" index="1"></constructor-arg>
        <constructor-arg value="300000" type="double"></constructor-arg>
    </bean>

    <!-- 使用构造器注入属性值可以指定参数的位置和类型 以区分重载构造器-->
    <bean id="car2" class="com.olivia.springlearning.beans.basic.Car">
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <!--<constructor-arg value="Beijing" type="java.lang.String"></constructor-arg>-->
        <!--如果字面值包括特殊字符 可以使用  <![CDATA[]]>  包裹起来-->
        <!--属性值可以使用value子节点包裹起来-->
        <!--<constructor-arg value="<Beijing>" type="java.lang.String"></constructor-arg>-->
        <!--上面这个写法不允许 要写成下面这个样子-->
        <constructor-arg type="java.lang.String">
            <value><![CDATA[<Beijing*>]]></value>
        </constructor-arg>
        <constructor-arg type="int">
            <value>250</value>
        </constructor-arg>
    </bean>

    <bean id="person" class="com.olivia.springlearning.beans.basic.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <!--可以使用property的ref属性来指定bean之间的引用关系-->
        <!--<property name="car" ref="car2"></property>-->
        <!--<property name="car">-->
            <!--<ref bean="car2"/>-->
        <!--</property>-->
        <!--内部bean,不能被外部引用，只能在内部使用-->
        <property name="car">
            <bean class="com.olivia.springlearning.beans.basic.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="Nanjing"></constructor-arg>
                <constructor-arg value="200000" type="double"></constructor-arg>
            </bean>
        </property>
        <property name="car.maxSpeed" value="260"></property>
    </bean>

    <bean id="person2" class="com.olivia.springlearning.beans.basic.Person">
        <constructor-arg value="Jerry"></constructor-arg>
        <constructor-arg value="25"></constructor-arg>
        <!--<constructor-arg ref="car"></constructor-arg>-->
        <!--测试null值-->
        <!--<constructor-arg><null></null></constructor-arg>-->
        <!--或者这么写-->
        <!--<constructor-arg><null/></constructor-arg>-->
        <constructor-arg ref="car"></constructor-arg>
        <!--为级联属性赋值，注意： 属性需要先初始化后 才可以为级联属性赋值，否则会有异常，
            和Struts2不同，很多时候我们也不会为级联属性赋值-->
        <property name="car.maxSpeed" value="250"></property>
    </bean>

    <!--测试如何配置集合属性-->
    <bean id="person3" class="com.olivia.springlearning.beans.collections.Person">
        <property name="name" value="Word"></property>
        <property name="age" value="27"></property>
        <property name="cars">
            <!--使用list结点为List类型的属性赋值-->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
                <bean class="com.olivia.springlearning.beans.basic.Car">
                    <constructor-arg value="Ford"></constructor-arg>
                    <constructor-arg value="Nanjing"></constructor-arg>
                    <constructor-arg value="200000" type="double"></constructor-arg>
                </bean>
            </list>
        </property>
    </bean>


    <!--配置Ma属性值-->
    <bean id="newPerson" class="com.olivia.springlearning.beans.collections.NewPerson">
        <property name="name" value="Haha"></property>
        <property name="age" value="8"></property>
        <property name="cars">
            <!--使用map结点 以及map entry的子节点配置 map类型的成员变量-->
            <map>
                <entry key="AA" value-ref="car"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>

    <!--配置properties属性值-->
    <bean id="dataSource" class="com.olivia.springlearning.beans.collections.DataSource">
        <property name="properties">
            <!--使用props和prop子节点为Properties属性赋值-->
            <props>
                <prop key="user">root</prop>
                <prop key="password">1234</prop>
                <prop key="jdbcUrl">jadbc:mysql://test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

    <!--配置单例的集合bean，以供多个bean之间进行引用
        使用util 把bean独立出来，就可以被多个bean共享引用-->
    <util:list id="cars">
        <ref bean="car"></ref>
        <ref bean="car2"></ref>
    </util:list>


    <bean id="person4" class="com.olivia.springlearning.beans.collections.Person">
        <property name="name" value="Jack"/>
        <property name="age" value="29"/>
        <property name="cars" ref="cars"/>
    </bean>

    <!--通过p命名空间为bean的属性赋值-->
    <bean id="person5" class="com.olivia.springlearning.beans.collections.Person" p:age="30"
    p:name="Queen" p:cars-ref="cars"></bean>

</beans>